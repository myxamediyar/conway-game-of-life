{"version":3,"sources":["GameVisual/Node.js","GameAlgorithm/Algorithm.js","GameVisual/GameVisual.js","AskDimension/AskDimension.js","App.js","reportWebVitals.js","index.js"],"names":["Node","changeNodeState","props","row","col","isAlive","updateGrid","returnClassName","undefined","setIsMousePressed","isMouseDown","setState","mouseIsPressed","catchMouseEnter","this","className","onMouseDown","onMouseUp","onMouseEnter","Component","neighborPos","AlgorithmInit","grid","rowVal","colVal","changeCount","newGrid","forEach","newRow","node","newNode","liveNeighbors","neighbors","nodePos","posVector","interRow","interCol","push","getAllNeighbors","filter","neighbor","length","CalcForAlive","GameVisual","gridUpdater","prevState","nodes","onButtonClick","updatedNodes","genNum","parseInt","state","generationNumber","algoResult","getInitialGrid","_nodes","_row","currentRow","_column","positionInfo","onClick","style","height","width","displayRowValFractions","map","rowIndex","displayColValFractions","nodeObj","nodeObjIndex","display","gridTemplateColumns","gridTemplateRows","AskDimension","changeStateRow","value","valueAsNum","target","isNaN","child","id","type","onChange","placeholder","min","max","ref","instance","href","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a57f41e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  changeNodeState = () => {\n    let { row, col, isAlive } = this.props;\n    this.props.updateGrid(row, col, !isAlive);\n  };\n\n  returnClassName = () => {\n    return this.props === undefined\n      ? \"Node\"\n      : this.props.isAlive\n      ? \"NodeAlive\"\n      : \"Node\";\n  };\n  setIsMousePressed = (isMouseDown) => {\n    this.setState({ mouseIsPressed: isMouseDown });\n  };\n\n  catchMouseEnter = () => {\n    if (!this.props.mouseIsPressed) return;\n    this.changeNodeState();\n  };\n\n  render() {\n    let { setIsMousePressed } = this.props;\n    return (\n      <div\n        className={this.returnClassName()}\n        onMouseDown={() => {\n          setIsMousePressed(true);\n          this.changeNodeState();\n        }}\n        onMouseUp={() => setIsMousePressed(false)}\n        onMouseEnter={this.catchMouseEnter}\n      ></div>\n    );\n  }\n}\n","/* #region GameConditions */\n/*Vector positions of neighbors\n    let DUL = [-1, 1],\nlet U = [0, 1],\nlet DUR = [1, 1],\nlet L = [-1, 0],\nlet R = [1, -0],\nlet DDL = [-1, -1],\nlet D = [0, -1],\nlet DDR = [1, -1],\n\n    node should be an \n    object with properties: \n    row, col, isAlive\n\n\nAny live cell with fewer than two live neighbours dies, as if by underpopulation.\nAny live cell with two or three live neighbours lives on to the next generation.\nAny live cell with more than three live neighbours dies, as if by overpopulation.\nAny dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n*/\n\n/* #endregion*/\nconst neighborPos = [\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [-1, 0],\n  [1, -0],\n  [-1, -1],\n  [0, -1],\n  [1, -1],\n];\n\nexport default function AlgorithmInit(grid, rowVal, colVal) {\n  return CalcForAlive(grid, rowVal, colVal);\n}\n\nfunction CalcForAlive(grid, rowVal, colVal) {\n  let changeCount = 0;\n  let newGrid = [];\n  grid.forEach((row) => {\n    let newRow = [];\n    row.forEach((node) => {\n      const newNode = { ...node };\n      const neighbors = getAllNeighbors(node, grid, rowVal, colVal);\n      const liveNeighbors = neighbors.filter((neighbor) => neighbor.isAlive);\n      if (node.isAlive) {\n        if (liveNeighbors.length < 2 || liveNeighbors.length > 3) {\n          newNode.isAlive = false;\n          changeCount += 1;\n        }\n      } else {\n        if (liveNeighbors.length === 3) {\n          newNode.isAlive = true;\n          changeCount += 1;\n        }\n      }\n      newRow.push(newNode);\n    });\n    newGrid.push(newRow);\n  });\n  return [newGrid, changeCount];\n}\n\nfunction getAllNeighbors(node, grid, rowVal, colVal) {\n  const neighbors = [];\n  const nodePos = [node.row, node.col];\n  neighborPos.forEach((posVector) => {\n    let interRow = nodePos[0] - posVector[0];\n    let interCol = nodePos[1] - posVector[1];\n    if (\n      interRow > -1 &&\n      interCol > -1 &&\n      interRow < rowVal &&\n      interCol < colVal\n    ) {\n      neighbors.push(grid[interRow][interCol]);\n    }\n  });\n  return neighbors;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node\";\nimport \"./GameVisual.css\";\nimport AlgorithmInit from \"../GameAlgorithm/Algorithm\";\n\nexport default class GameVisual extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n      mouseIsPressed: false,\n      generationNumber: 0,\n    };\n  }\n\n  setIsMousePressed = (isMouseDown) => {\n    this.setState({ mouseIsPressed: isMouseDown });\n  };\n\n  componentDidMount() {\n    this.getInitialGrid();\n  }\n\n  gridUpdater = (row, col, isAlive) => {\n    this.setState((prevState) => {\n      let nodes = [...prevState.nodes];\n      nodes[row][col].isAlive = isAlive;\n      return nodes;\n    });\n  };\n\n  onButtonClick = (updatedNodes) => {\n    let genNum = parseInt(this.state.generationNumber);\n\n    let algoResult = AlgorithmInit(\n      updatedNodes,\n      this.props.rowVal,\n      this.props.rowVal\n    );\n    if (algoResult[1] === 0) {\n      this.setState({\n        generationNumber: `${genNum} (no changes/empty)`,\n      });\n    } else {\n      this.setState({\n        nodes: algoResult[0],\n        generationNumber: genNum + 1,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"centerGol\">\n        <div className=\"buttonContainer\">\n          <button\n            className=\"f6 link dim1 ba ph3 pv2 mb2 dib black ma4\"\n            onClick={this.getInitialGrid}\n          >\n            clear\n          </button>{\" \"}\n          <button\n            className=\"f6 link dim1 ba ph3 pv2 mb2 dib black ma4\"\n            onClick={() => this.onButtonClick(this.state.nodes)}\n          >\n            next generation\n          </button>\n        </div>\n        <div\n          className=\"mw5 mw7-ns center ph5-ns\"\n          style={{ height: \"100%\", width: \"100%\" }}\n        >\n          <h2 className=\"genClass\">\n            generation: {this.state.generationNumber}\n          </h2>\n          <div className=\"gridDiv\" style={this.displayRowValFractions()}>\n            {this.state.nodes.map((row, rowIndex) => {\n              return (\n                <div\n                  className=\"nodeDiv\"\n                  key={rowIndex}\n                  style={this.displayColValFractions()}\n                >\n                  {row.map((nodeObj, nodeObjIndex) => {\n                    return (\n                      <Node\n                        key={nodeObjIndex}\n                        row={nodeObj.row}\n                        col={nodeObj.col}\n                        isAlive={nodeObj.isAlive}\n                        updateGrid={this.gridUpdater}\n                        mouseIsPressed={this.state.mouseIsPressed}\n                        setIsMousePressed={this.setIsMousePressed}\n                        // styleChanger={this.properNodeDimensions}\n                      ></Node>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  getInitialGrid = () => {\n    this.setState({ nodes: [], generationNumber: 0 }, () => {\n      let _nodes = [];\n      for (let _row = 0; _row < this.props.rowVal; _row++) {\n        let currentRow = [];\n        for (let _column = 0; _column < this.props.rowVal; _column++) {\n          let positionInfo = {\n            row: _row,\n            col: _column,\n            isAlive: false,\n          };\n          currentRow.push(positionInfo);\n        }\n        _nodes.push(currentRow);\n      }\n      this.setState({ nodes: _nodes });\n    });\n  };\n\n  displayRowValFractions() {\n    return {\n      width: \"100%\",\n      height: \"auto\",\n      display: \"grid\",\n      gridTemplateColumns: \"1fr\",\n      gridTemplateRows: `repeat(${this.props.rowVal}, 1fr)`,\n    };\n  }\n  displayColValFractions() {\n    return {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${this.props.rowVal}, 1fr)`,\n      gridTemplateRows: \"1fr\",\n    };\n  }\n}\n","import React, { Component } from \"react\";\nimport GameVisual from \"../GameVisual/GameVisual\";\nimport \"./AskDimension.css\";\n\nexport default class AskDimension extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowVal: 10,\n    };\n  }\n\n  changeStateRow = (value) => {\n    let valueAsNum = parseInt(value.target.value);\n    if (valueAsNum < 5 || valueAsNum > 40 || isNaN(valueAsNum)) {\n      this.setState({ rowVal: 10 });\n    } else {\n      this.setState({ rowVal: valueAsNum });\n    }\n    this.child.getInitialGrid();\n  };\n\n  render() {\n    return (\n      <div className=\"AskDimension\">\n        <div className=\"center pa3 ph5-ns centerbek\">\n          <span className=\"centerbekchild\">Conway's game of life</span>\n          <label className=\"\">Insert # of rows</label>\n          <input\n            id=\"rowNum\"\n            type=\"number\"\n            onChange={this.changeStateRow}\n            placeholder=\"4<#<41\"\n            min=\"5\"\n            max=\"40\"\n          />\n        </div>\n        <GameVisual\n          ref={(instance) => {\n            this.child = instance;\n          }}\n          rowVal={this.state.rowVal}\n        ></GameVisual>\n        <a\n          href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"f6 link dim1 ba ph3 pv2 dib black rules\"\n        >\n          Rules\n        </a>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"tachyons\";\nimport AskDimension from \"./AskDimension/AskDimension\";\n\nfunction App() {\n  return (\n    <div id=\"appMain\">\n      <AskDimension></AskDimension>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}